"use strict";(self.webpackChunk=self.webpackChunk||[]).push([["220"],{5731:function(e,n,a){a.r(n),a.d(n,{default:()=>h});var t=a(2676),r=a(453),s=a(3625),o=a(7500),i=a(7910),l=a(6714);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"代码示例",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例",children:"#"}),"代码示例"]}),"\n",(0,t.jsxs)(n.h2,{id:"展示模式",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#展示模式",children:"#"}),"展示模式"]}),"\n",(0,t.jsxs)(l.Z,{isMobile:"false",demoId:"_docs_Draw_1",children:[(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import type { CanvasDrawProps } from '@canvas-draw/react';\nimport { CanvasDraw } from '@canvas-draw/react';\nimport React from 'react';\n// @ts-expect-error 忽略报错\nimport testImg from './assets/test.jpg';\nimport { ImageDraw, type SizeInfo, type ImageDrawProps } from './components/ImageDraw';\n\nconst data: CanvasDrawProps['value'] = [\n  {\n    type: 'polygon',\n    data: {\n      points: [\n        { x: 1082, y: 443 },\n        { x: 1086, y: 1022 },\n        { x: 1839, y: 1041 },\n        { x: 1881, y: 513 },\n        { x: 1766, y: 262 },\n      ],\n    }\n  },\n  {\n    type: 'rectangle',\n    data: {\n      rect: { x: 5, y: 5, width: 200, height: 400 },\n    },\n  },\n  {\n    type: 'circle',\n    data: {\n      rect: { x: 100, y: 100, width: 200, height: 300 },\n    },\n  },\n];\n\nfunction Example() {\n  const [value] = React.useState(data);\n  const [sizeInfo, setSizeInfo] = React.useState<{\n    image: SizeInfo,\n    drawArea: SizeInfo\n  }>();\n\n  const onImageLoad: ImageDrawProps['onLoad'] = (data) => {\n    setSizeInfo(data);\n  }\n\n  const canvasDraw = React.useMemo(() => {\n    if (!sizeInfo) return null;\n\n    const { image, drawArea } = sizeInfo;\n\n    return (\n      <CanvasDraw\n        mode=\"default\"\n        value={value}\n        editableMaxSize={10}\n        axis={image}\n        width={drawArea.width}\n        height={drawArea.height}\n        shapeStyle={{\n          fillStyle: 'rgba(255, 77, 82, 0.15)',\n          strokeStyle: '#FF4D52',\n        }}\n      />\n    )\n  }, [sizeInfo, value]);\n\n  return (\n    <ImageDraw src={testImg} onLoad={onImageLoad}>\n      {canvasDraw}\n    </ImageDraw>\n  );\n};\n\nexport default Example;\n"})})}),(0,t.jsx)(s.default,{})]}),"\n",(0,t.jsxs)(n.h2,{id:"选择模式",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#选择模式",children:"#"}),"选择模式"]}),"\n",(0,t.jsxs)(l.Z,{isMobile:"false",demoId:"_docs_Draw_2",children:[(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import type { CanvasDrawProps } from '@canvas-draw/react';\nimport { CanvasDraw } from '@canvas-draw/react';\nimport React from 'react';\n// @ts-expect-error 忽略报错\nimport testImg from './assets/test.jpg';\nimport { ImageDraw, type SizeInfo, type ImageDrawProps } from './components/ImageDraw';\n\nconst data: CanvasDrawProps['value'] = [\n  {\n    type: 'polygon',\n    data: {\n      points: [\n        { x: 1082, y: 443 },\n        { x: 1086, y: 1022 },\n        { x: 1839, y: 1041 },\n        { x: 1881, y: 513 },\n        { x: 1766, y: 262 },\n      ],\n    }\n  },\n  {\n    type: 'rectangle',\n    data: {\n      rect: { x: 5, y: 5, width: 200, height: 400 },\n    },\n  },\n  {\n    type: 'circle',\n    data: {\n      rect: { x: 100, y: 100, width: 200, height: 300 },\n    },\n  },\n];\n\nfunction Example() {\n  const [value] = React.useState(data);\n  const [selectedIndex, setSelectedIndex] = React.useState<number>(1);\n  const [sizeInfo, setSizeInfo] = React.useState<{\n    image: SizeInfo,\n    drawArea: SizeInfo\n  }>();\n\n  const onSelect = (index: number) => {\n    setSelectedIndex(index);\n  };\n\n  const onImageLoad: ImageDrawProps['onLoad'] = (data) => {\n    setSizeInfo(data);\n  }\n\n  const canvasDraw = React.useMemo(() => {\n    if (!sizeInfo) return null;\n\n    const { image, drawArea } = sizeInfo;\n\n    return (\n      <CanvasDraw\n        value={value}\n        editableMaxSize={10}\n        axis={image}\n        mode=\"select\"\n        selectedIndex={selectedIndex}\n        width={drawArea.width}\n        height={drawArea.height}\n        onSelect={onSelect}\n      />\n    )\n  }, [sizeInfo, value, selectedIndex]);\n\n  return (\n    <ImageDraw src={testImg} onLoad={onImageLoad}>\n      {canvasDraw}\n    </ImageDraw>\n  );\n};\n\nexport default Example;\n"})})}),(0,t.jsx)(o.default,{})]}),"\n",(0,t.jsxs)(n.h2,{id:"编辑模式",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑模式",children:"#"}),"编辑模式"]}),"\n",(0,t.jsxs)(l.Z,{isMobile:"false",demoId:"_docs_Draw_3",children:[(0,t.jsx)(t.Fragment,{children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import type { CanvasDrawProps } from '@canvas-draw/react';\nimport { CanvasDraw } from '@canvas-draw/react';\nimport React from 'react';\nimport { Button, Select, Space } from 'tdesign-react';\n// @ts-expect-error 忽略报错\nimport testImg from './assets/test.jpg';\nimport { ImageDraw, type ImageDrawProps, type SizeInfo } from './components/ImageDraw';\n\nconst buttonText = ['绘制区域', '取消绘制', '重新绘制'];\n\nfunction Example() {\n  const [value, setValue] = React.useState<CanvasDrawProps['value']>([]);\n  const [shape, setShape] = React.useState<CanvasDrawProps['shape']>('polygon');\n  const [buttonState, setButtonState] = React.useState<0 | 1 | 2>(0);\n  const [sizeInfo, setSizeInfo] = React.useState<{\n    image: SizeInfo,\n    drawArea: SizeInfo\n  }>();\n\n  const onImageLoad: ImageDrawProps['onLoad'] = (data) => {\n    setSizeInfo(data);\n  }\n\n  const canvasDraw = React.useMemo(() => {\n    if (!sizeInfo) return null;\n\n    const { image, drawArea } = sizeInfo;\n\n    return (\n      <CanvasDraw\n        mode=\"edit\"\n        value={value}\n        shape={shape}\n        editableMaxSize={10}\n        axis={image}\n        width={drawArea.width}\n        height={drawArea.height}\n        onChange={(val) => {\n          setButtonState(2);\n          setValue(val!);\n        }}\n      />\n    )\n  }, [sizeInfo, value, shape]);\n\n  return (\n    <>\n      <Space style={{ marginBottom: 12 }}>\n        <Select\n          value={shape}\n          options={[\n            { label: '多边形', value: 'polygon' },\n            { label: '矩形', value: 'rectangle' },\n            { label: '圆形', value: 'circle' },\n          ]}\n          onChange={(val) => {\n            setShape(val as CanvasDrawProps['shape']);\n          }}\n        />\n        <Button\n          onClick={() => {\n            if (buttonState === 0) {\n              setButtonState(1);\n            } else if (buttonState === 1) {\n              setValue([]);\n              setButtonState(0);\n            } else {\n              setButtonState(1);\n              setValue([]);\n            }\n          }}\n        >\n          {buttonText[buttonState]}\n        </Button>\n      </Space>\n      <ImageDraw src={testImg} onLoad={onImageLoad}>\n        {canvasDraw}\n      </ImageDraw>\n    </>\n  );\n};\n\nexport default Example;\n"})})}),(0,t.jsx)(i.default,{})]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(d,e)})):d(e)}let h=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["docs%2FDraw.mdx"]={toc:[{id:"展示模式",text:"展示模式",depth:2},{id:"选择模式",text:"选择模式",depth:2},{id:"编辑模式",text:"编辑模式",depth:2}],title:"代码示例",headingTitle:"代码示例",frontmatter:{}}},3625:function(e,n,a){a.r(n),a.d(n,{default:()=>d});var t=a(2676),r=a(7525),s=a(5271),o=a(7692),i=a(4373);let l=[{type:"polygon",data:{points:[{x:1082,y:443},{x:1086,y:1022},{x:1839,y:1041},{x:1881,y:513},{x:1766,y:262}]}},{type:"rectangle",data:{rect:{x:5,y:5,width:200,height:400}}},{type:"circle",data:{rect:{x:100,y:100,width:200,height:300}}}],d=function(){let[e]=s.useState(l),[n,a]=s.useState(),d=s.useMemo(()=>{if(!n)return null;let{image:a,drawArea:s}=n;return(0,t.jsx)(r.J,{mode:"default",value:e,editableMaxSize:10,axis:a,width:s.width,height:s.height,shapeStyle:{fillStyle:"rgba(255, 77, 82, 0.15)",strokeStyle:"#FF4D52"}})},[n,e]);return(0,t.jsx)(i.ImageDraw,{src:o,onLoad:e=>{a(e)},children:d})}},7910:function(e,n,a){a.r(n),a.d(n,{default:()=>u});var t=a(2676),r=a(7525),s=a(5271),o=a(1139),i=a(4221),l=a(9074),d=a(7692),c=a(4373);let h=["绘制区域","取消绘制","重新绘制"],u=function(){let[e,n]=s.useState([]),[a,u]=s.useState("polygon"),[m,p]=s.useState(0),[x,g]=s.useState(),f=s.useMemo(()=>{if(!x)return null;let{image:s,drawArea:o}=x;return(0,t.jsx)(r.J,{mode:"edit",value:e,shape:a,editableMaxSize:10,axis:s,width:o.width,height:o.height,onChange:e=>{p(2),n(e)}})},[x,e,a]);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.T,{style:{marginBottom:12},children:[(0,t.jsx)(i.P,{value:a,options:[{label:"多边形",value:"polygon"},{label:"矩形",value:"rectangle"},{label:"圆形",value:"circle"}],onChange:e=>{u(e)}}),(0,t.jsx)(l.z,{onClick:()=>{0===m?p(1):1===m?(n([]),p(0)):(p(1),n([]))},children:h[m]})]}),(0,t.jsx)(c.ImageDraw,{src:d,onLoad:e=>{g(e)},children:f})]})}},7500:function(e,n,a){a.r(n),a.d(n,{default:()=>d});var t=a(2676),r=a(7525),s=a(5271),o=a(7692),i=a(4373);let l=[{type:"polygon",data:{points:[{x:1082,y:443},{x:1086,y:1022},{x:1839,y:1041},{x:1881,y:513},{x:1766,y:262}]}},{type:"rectangle",data:{rect:{x:5,y:5,width:200,height:400}}},{type:"circle",data:{rect:{x:100,y:100,width:200,height:300}}}],d=function(){let[e]=s.useState(l),[n,a]=s.useState(1),[d,c]=s.useState(),h=e=>{a(e)},u=s.useMemo(()=>{if(!d)return null;let{image:a,drawArea:s}=d;return(0,t.jsx)(r.J,{value:e,editableMaxSize:10,axis:a,mode:"select",selectedIndex:n,width:s.width,height:s.height,onSelect:h})},[d,e,n]);return(0,t.jsx)(i.ImageDraw,{src:o,onLoad:e=>{c(e)},children:u})}}}]);